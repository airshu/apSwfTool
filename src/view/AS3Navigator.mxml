<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		   creationComplete="init()" xmlns:view="view.*">
	
	<mx:Script>
		<![CDATA[
			import com.alonepig.abc.ABC;
			import com.alonepig.abc.data.Instance_info;
			import com.alonepig.abc.traits.Trait_method;
			import com.alonepig.abc.traits.Trait_slot;
			import com.alonepig.model.ModelLocator;
			import com.alonepig.swf.tags.Tag;
			import com.alonepig.utils.TagTypes;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			
			import events.SwfEvent;
			
			private var model:ModelLocator;
			private var xml:XML = <items />;
			[Bindable]private var allData:ArrayCollection;
			private var array:Array;
			private function init():void
			{
				allData = new ArrayCollection();
				array = [{name:"aaa.swf", children:[]}];
				model = ModelLocator.getInstance();
				this.parentApplication.addEventListener(SwfEvent.UPDATE_SWF_EVENT, onUpdateSwf);
				if(model.swf)
					onUpdateSwf();
			}
			
			private function parseTag():void
			{
				var imageData:Object = {name:"Images", type:"image", children:[] };
				array[0].children.push(imageData);
				
				
				
				var shapeData:Object = {name:"Shapes", type:"shape", children:[]};
				array[0].children.push(shapeData);
				
				var fontData:Object = { name:"Fonts", type:"font", children:[]};
				array[0].children.push( fontData );
				
				var textData:Object = {name:"Texts", type:"text", children:[]};
				array[0].children.push( textData );

				var soundData:Object = {name:"Sounds", type:"sound", children:[]};
				array[0].children.push( soundData );
				
				var videoData:Object = {name:"Videos", type:"video", children:[]};
				array[0].children.push( videoData );
				
				var buttonData:Object = {name:"Buttons", type:"button", children:[]};
				array[0].children.push( buttonData );
				
				var frameData:Object = { name:"Frames", type:'frame', children:[]}; 
				array[0].children.push( frameData );
				
				var spriteData:Object = { name:"Sprites", type:'sprite', children:[]};
				array[0].children.push( spriteData );
				
				var scriptData:Object = { name:"Scripts", type:'script', children:[]};
				array[0].children.push( scriptData );
				
				var packg:XMLList; 
				var tag:Tag;
				var pkg:Object;
				for (var i:int = 0; i < model.swf.tags.length; i++) 
				{
					tag = model.swf.tags[i];
					switch(tag.tagType)
					{
						case TagTypes.TAG_DEFINEBITSLOSSLESS:
						case TagTypes.TAG_DEFINEBITSLOSSLESS2:
						case TagTypes.TAG_DEFINEBITS:
						case TagTypes.TAG_DEFINEBITSJPEG2:
						case TagTypes.TAG_DEFINEBITSJPEG3:
						case TagTypes.TAG_DEFINEBITSJPEG4:
							pkg = {
								type:'image',
								name:tag.tagName + " " + tag.tagType + " Image " + Object(tag).characterId,
								data:tag
							};
							imageData.children.push( pkg );
							break;
						case TagTypes.TAG_DEFINESHAPE:
						case TagTypes.TAG_DEFINESHAPE2:
						case TagTypes.TAG_DEFINESHAPE3:
						case TagTypes.TAG_DEFINESHAPE4:
							pkg = {
								type:"shape",
								name:tag.tagName + " " + Object(tag).shapeId,
								data:tag
							};
							shapeData.children.push( pkg );
							break;
						case TagTypes.TAG_DEFINETEXT:
						case TagTypes.TAG_DEFINETEXT2:
						case TagTypes.TAG_DEFINEEDITTEXT:
							pkg = {
								type:'text',
								name:tag.tagName + " " + Object(tag).characterId,
								data:tag
							};
							textData.children.push( pkg );
							break;
						case TagTypes.TAG_DEFINEFONT:
						case TagTypes.TAG_DEFINEFONT2:
						case TagTypes.TAG_DEFINEFONT3:
						case TagTypes.TAG_DEFINEFONT4:
							pkg = {
								type:'font',
								name:tag.tagName + " " + Object(tag).fontId,
								data:tag
							};
							fontData.children.push( pkg );
							break;
						case TagTypes.TAG_DEFINEBUTTON:
						case TagTypes.TAG_DEFINEBUTTON2:
							pkg = {
								type:'button',
								name:tag.tagName + " " + Object(tag).buttonId,
								data:tag
							};
							buttonData.children.push( pkg );
							break;
						case TagTypes.TAG_DEFINESPRITE:
							pkg = {
								type:'sprite',
								name:tag.tagName + " " + Object(tag).characterid,
								data:tag
							};
							spriteData.children.push( pkg );
							break;
						case TagTypes.TAG_DEFINESOUND:
						case TagTypes.TAG_SOUNDSTREAMBLOCK:
							pkg = {
								type:'sound',
								name:tag.tagName + " " + soundData.children.length,
								data:tag
							};
							soundData.children.push( pkg );
							break;
						case TagTypes.TAG_SHOWFRAME:
							pkg = {
								type:'frame',
								name:tag.tagName + " " + soundData.children.length,
								data:tag
							};
							frameData.children.push( pkg );
							break;
					}
				}
			}
			
			
			private function onUpdateSwf(event:Event=null):void
			{
				array = [{name:"aaa.swf", children:[]}];
				allData.source = [];
				
				parseTag();
				allData.source = array;
				return;
				xml = <items name="Scripts" type="script">
						<packg name="" type="packg" />
					  </items>;
				
				
				var abc:ABC;
				var packageName:String;
				var className:String;
				var packg:XMLList; 
					
				for(var i:int=0; i<model.swf.abc.length; i++)
				{
					abc = model.swf.abc[i];
					for(var c:* in abc.classs)
					{
						packageName = "";
						className = abc.classs[c].name;
						if (abc.classs[c].name.indexOf("::") > 0) 
						{
							var info:Array = className.split("::");
							packageName = info[0];
							className = info[1];
							
							if(xml.packg)
							{
								packg = xml.packg.(@name == packageName);
								if(packg.length()==0)
								{
									var pkg:XML = <packg type='packg' />;
									pkg.@name = packageName;
									xml.appendChild( pkg );
								}
							}
							else
							{
								var pkg:XML = <packg type='packg' />;
								pkg.@name = packageName;
								xml.appendChild( pkg );
							}
						}
						if(xml.packg)
						{
							packg = xml.packg.(@name == packageName);
							if(packg.length() > 0)
							{
								var node:XML = <class type="class" />;
								node.@name = className;
								packg[0].appendChild(node);
				//看看instance class script 中的init有什么不同
								node.@data = dumpInstances(abc, abc.instances[c]);
							}
						}
					}
				}
				trace(xml.toXMLString());
//				allXML.appendChild( xml );
				abcData = new XMLListCollection(xml.packg);
			}
			
			private function dumpInstances(abc:ABC, inst:Instance_info):String
			{
				var line:String="";
//				if(inst.flags & Instance_info.CONSTANT_ClassInterface)
//					line = "interface";
//				else
//				{
//					line = "class";
//					if( !(inst.flags & Instance_info.CONSTANT_ClassSealed ) )
//						line = "dynamic" + line;
//					if( inst.flags & Instance_info.CONSTANT_ClassFinal )
//						line = "final" + line;
//				}
				
				line += inst.nameStr + " extends " + inst.super_nameStr;
			
				if(inst.intrf_count>1)
				{
					line += " implements " + inst.interfaces[0];
					for(var i:int = 1; i < inst.interfaces.length; i++) 
					{
						line += ", " + inst.interfaces[i];
					}
				}
				
				line += "{ ";
				
				if(inst.iinit)
				{
					// 构造函数
					line += "\n\t" + abc.methods[inst.iinit].nameStr + "():"+abc.methods[inst.iinit].return_typeStr;  
				}
				line += "{\n"; 
				
				
				for (var j:int = 0; j < abc.method_bodys.length; j++) 
				{
					if(abc.method_bodys[j].method == inst.iinit)
					{
//						line += abc.methods[inst.iinit].nameStr + "\n";
						trace(abc.methods[inst.iinit].nameStr);
						// 表示有方法体
						var instructs:Array = abc.method_bodys[j].getMethodInstruction();
						for (var k:int = 0; k < instructs.length; k++) 
						{
							line += "\t\t" + instructs[k].toString();
						}
//						line += "\t\t"+abc.method_bodys[j].getMethodInstruction().toString();
					}
				}
				
				line += "\t}\n";
				
				for (var i2:int = 0; i2 < inst.trait_count; i2++) 
				{
					var data:Object = inst.traits[i2].data;
					if(data is Trait_slot)
					{
						line += "\t"+Trait_slot.getConstantKind(data.vkind) + abc.constant_info.multinames[data.type_name].data.toString() + "\n";
					}
					else if(data is Trait_method)
					{
						// 函数参数
						var param:String="";
						for(var a:int=0; a<abc.methods[data.method].param_count;a++)
						{
//							param +=  abc.methods[data.method].param_names[a];
//							if(a!=abc.methods[data.method].param_count-1)
//								param += ",";
						}
						line += "\t"+"public function " + abc.methods[data.method].nameStr + "("+ param +"):" + abc.methods[data.method].return_typeStr + "\n";
						line += "\t{\n";
						// 方法体
						line += "\n\t}\n";
					}
				}
				
				line += "\n}";
				
				return line;
			}
			
			[Bindable]
			private var abcData:XMLListCollection;
			
			
			private function onItemClick(event:ListEvent):void
			{
				var item:Object = Tree(event.target).selectedItem;
				switch(item.type)
				{
					case "sound":
						contentViewStack.selectedChild = soundPanel;
						soundPanel.setSoundDatas(item);
						break;
					case "image":
						contentViewStack.selectedChild = imagePanel;
						imagePanel.setImageDatas(item);
						break;
					case "font":
						contentViewStack.selectedChild = fontPanel;
						fontPanel.setFontDatas(item);
						break;
					case "text":
						contentViewStack.selectedChild = textPanel;
						textPanel.setTextDatas(item);
						break;
					case "sprite":
						contentViewStack.selectedChild = spritePanel;
						spritePanel.setSpriteDatas(item);
						break;
					case "shape":
						contentViewStack.selectedChild = shapePanel;
						shapePanel.setShapeDatas(item);
						break;
					case "frame":
						contentViewStack.selectedChild = framePanel;
						framePanel.setFrameDatas(item);
						break;
					default:
						contentViewStack.selectedChild = opcodeBox;
						break;
				}
				return;
				var node:XML = Tree(event.target).selectedItem as XML;
				
				if(node.@type.indexOf("class") == 0)
				{
//					contentViewStack.selectedIndex = 1;
					contentText = node.@data.toString();
				}
				else if(node.@type.indexOf("image") == 0)
				{
//					contentViewStack.selectedIndex = 0;
					var tag:Tag = Tag(node.@data);
//					var bitmap:Bitmap = new Bitmap(tag.bt);
					trace(tag.bt.readUnsignedInt(), (tag.bt.length-4)/4/width);
				}
				else
				{
//					contentViewStack.selectedIndex = 1;
					contentText = node.@data.toString();
				}
			}
			
			[Bindable]
			private var contentText:String;
			
			
		]]>
	</mx:Script>
	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox id="navBox" width="30%" height="100%">
			<mx:Tree width="100%" dataProvider="{allData}" labelField="name" height="100%" 
					 itemClick="onItemClick(event)" >
			</mx:Tree>
		</mx:VBox> 
		<mx:VBox id="contentBox" width="40%" height="100%">
			<mx:ViewStack width="100%" height="100%" id="contentViewStack">
				<mx:VBox id="opcodeBox" width="30%" height="100%">
					<mx:TextArea width="100%" height="100%" text="{contentText}"/>
				</mx:VBox>
				<view:ImagePanel id="imagePanel" width="100%" height="100%" />
				<view:FontPanel id="fontPanel" width="100%" height="100%" />
				<view:TextPanel id="textPanel" width="100%" height="100%" />
				<view:SoundPanel id="soundPanel" width="100%" height="100%" />
				<view:ShapePanel id="shapePanel" width="100%" height="100%" />
				<view:SpritePanel id="spritePanel" width="100%" height="100%" />
				<view:FramePanel id="framePanel" width="100%" height="100%" />
				
			</mx:ViewStack>
		</mx:VBox>
		
	</mx:HDividedBox>
</mx:Canvas>
